#!/bin/env bash
# shellcheck disable=SC2016,SC2145,SC2155,SC2199,SC2164,SC2086
# https://raw.githubusercontent.com/ivankatliarchuk/dotfiles/master/shell/functions
ROOT="$(command -v sudo)"

# Create a directory and cd into it
mcd() {
  mkdir "${1}" && cd "${1}"
}

# Create a new directory and enter it
mkcd() { mkdir -p "$@" && cd "$_"; }

# Execute a command in a specific directory
xin() {
    (
        cd "${1}" && shift && ${@}
    )
}

# Zip the directory
function zd() { zip -r "$1".zip "$1"; }

# 7zip the directory
function 7zd() { 7z a "$1" "$1"/*; }

# Extract most known archives with one command
function extract() {
  if [ -f $1 ]; then
    case $1 in
      *.tar.bz2) tar xvjf $1                                   ;;
      *.tar.gz)  tar xvzf $1                                   ;;
      *.tar.xz)  tar xvJf $1                                   ;;
      *.lzma)    unlzma $1                                     ;;
      *.bz2)     bunzip2 $1                                    ;;
      *.rar)     unrar x -ad $1                                ;;
      *.gz)      gunzip $1                                     ;;
      *.tar)     tar xvf $1                                    ;;
      *.tbz2)    tar xvjf $1                                   ;;
      *.tgz)     tar xvzf $1                                   ;;
      *.zip)     unzip $1                                      ;;
      *.Z)       uncompress $1                                 ;;
      *.7z)      7z x $1                                       ;;
      *.xz)      unxz $1                                       ;;
      *.exe)     cabextract $1                                 ;;
      *)         echo "extract: '$1' - unknown archive method" ;;
    esac
  else
    echo "$1 - file does not exist"
  fi
}

# to ascii
function _decode() {
  case $1 in
    base64) shift 1; echo -n "$@" | base64 --decode            ;;
    binary) shift 1; echo -n "$@" | perl -lpe '$_=pack"B*",$_' ;;
    hex)    shift 1; echo -n "0x$@" | xxd -r                   ;;
  esac
}

# from ascii
function _encode() {
  case $1 in
    base64) shift 1; echo -n "$@" | openssl base64            ;;
    binary) shift 1; echo -n "$@" | perl -lpe '$_=unpack"B*"' ;;
    hex)    shift 1; echo -n "$@" | xxd -p                    ;;
    md5)    shift 1; echo -n "$@" | openssl md5               ;;
    sha1)   shift 1; echo -n "$@" | openssl sha1              ;;
  esac
}

# Determine size of a file or total size of a directory
function _size() {
	if du -b /dev/null > /dev/null 2>&1; then
		local arg=-sbh;
	else
		local arg=-sh;
	fi
	if [[ -n "$@" ]]; then
		du $arg -- "$@";
	else
		du $arg .[^.]* ./*;
	fi;
}

# Run `dig` and display the most useful info
function _digga() {
	dig +nocmd "$1" any +multiline +noall +answer;
}

# Show all the names (CNs and SANs) listed in the SSL certificate
# for a given domain
function getcertnames() {
	if [ -z "${1}" ]; then
		echo "ERROR: No domain specified.";
		return 1;
	fi;

	local domain="${1}";
	echo "Testing ${domain}â€¦";
	echo ""; # newline

	local tmp=$(echo -e "GET / HTTP/1.0\nEOT" \
		| openssl s_client -connect "${domain}:443" -servername "${domain}" 2>&1);

	if [[ "${tmp}" = *"-----BEGIN CERTIFICATE-----"* ]]; then
		local certText=$(echo "${tmp}" \
			| openssl x509 -text -certopt "no_aux, no_header, no_issuer, no_pubkey, \
			no_serial, no_sigdump, no_signame, no_validity, no_version");
		echo "Common Name:";
		echo ""; # newline
		echo "${certText}" | grep "Subject:" | sed -e "s/^.*CN=//" | sed -e "s/\/emailAddress=.*//";
		echo ""; # newline
		echo "Subject Alternative Name(s):";
		echo ""; # newline
		echo "${certText}" | grep -A 1 "Subject Alternative Name:" \
			| sed -e "2s/DNS://g" -e "s/ //g" | tr "," "\n" | tail -n +2;
		return 0;
	else
		echo "ERROR: Certificate not found.";
		return 1;
	fi;
}

# Normalize `open` across Linux, macOS, and Windows.
# This is needed to make the `o` function (see below) cross-platform.
if [ ! "$(uname -s)" = 'Darwin' ]; then
	if grep -q Microsoft /proc/version; then
		# Ubuntu on Windows using the Linux subsystem
		alias open='explorer.exe';
	else
		alias open='xdg-open';
	fi
fi

# `o` with no arguments opens the current directory, otherwise opens the given
# location
op() {
	if [ $# -eq 0 ]; then
		open .;
	else
		open "$@";
	fi;
}

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
tre() {
	tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX;
}

# Change directories and view the contents at the same time
cdl() {
    DIR="$*";
    # if no DIR given, go home
    if [ $# -lt 1 ]; then
      DIR=$HOME;
    fi;
    builtin cd "${DIR}" && \
    # use your preferred ls command
    ls -F
}

gpg-import() {
  local public_key=$1
  local private_key=$2
  gpg --import "${public_key}"
  gpg --allow-secret-key-import --import "${private_key}"
}

gpg-export() {
  local armor=$1 # some-email@mydomain.local
  gpg --export -a "${armor}" > public.key
  gpg --export-secret-key -a "${armor}" > private.key
}

gpg-restart() {
  pkill gpg
  pkill pinentry
  pkill ssh-agent
  eval "$(gpg-agent --daemon --enable-ssh-support)"
}

# WWW
grep-ip() {
  grep -Eo \
    "([0-9]{1,3}\.){3}[0-9]{1,3}" "${@}"
}

grep-url() {
  grep -Eo \
    "(https?|ftp|file)://[-A-Za-z0-9\+&@#/%?=~_|!:,.;]*[-A-Za-z0-9\+&@#/%=~_|]" "${@}"
}

cidr() {
  whois -h "whois.arin.net" -- \
  "n + $(curl -s https://icanhazip.com/)" | \
    grep "CIDR:"
}

# Network
# shellcheck disable=SC2032,SC2033
function vpn {
  ssh -C -N -L 5555:127.0.0.1:8118 vpn
}

# Dump Traffic
function dump-arp {
  ${ROOT} tcpdump -eni ${NETWORK} -w arp-${NOW}.pcap \
    "ether proto 0x0806"
}

function dump-icmp {
  ${ROOT} tcpdump -ni ${NETWORK} -w icmp-${NOW}.pcap \
    "icmp"
}

function dump-pflog {
  ${ROOT} tcpdump -ni pflog0 -w pflog-${NOW}.pcap \
    "not icmp6 and not host ff02::16 and not host ff02::d"
}

function dump-syn {
  ${ROOT} tcpdump -ni ${NETWORK} -w syn-${NOW}.pcap \
    "tcp[13] & 2 != 0"
}

function dump-udp {
  ${ROOT} tcpdump -ni ${NETWORK} -w udp-${NOW}.pcap \
    "udp and not port 443"
}

function dump-dns {
  tshark -Y "dns.flags.response == 1" -Tfields \
    -e frame.time_delta -e dns.qry.name -e dns.a \
      -Eseparator=,
}

function dump-http {
  tshark -Y "http.request or http.response" -Tfields \
    -e ip.dst -e http.request.full_uri -e http.request.method \
      -e http.response.code -e http.response.phrase \
        -Eseparator=,
}

function dump-ssl {
  tshark -Y "ssl.handshake.certificate" -Tfields \
    -e ip.src -e x509sat.uTF8String -e x509sat.printableString \
      -e x509sat.universalString -e x509sat.IA5String \
        -e x509sat.teletexString \
          -Eseparator=,
}

# Docker
docker-rmi() {
  docker container prune -f # remove all stopped containers
  docker rmi "$(docker images -a | grep "^<none>" | awk '{print $3}')" -f
  docker rmi "$(docker images -f "dangling=true" -q)" -f
  docker image prune --force --filter="dangling=true" # clean dangling images if any
  docker images | grep none | awk '{ print $3; }' | xargs docker rmi --force
  # keep last 2 builds for each image from the repository
  for diru in $(docker images --format "{{.Repository}}" | sort | uniq); do
      for dimr in $(docker images --format "{{.ID}};{{.Repository}}:{{.Tag}};'{{.CreatedAt}}'" --filter reference="$diru" | sed "s/\s+/~/g" | tail -n+3); do
          img_tag=$(echo "${dimr}" | cut -d";" -f2);
          docker rmi "$img_tag";
      done;
  done
}

pip-install() {
  python3 -m pip install "${@}"
}

python-local() {
  # python-local 2.7.15
  pyenv local "${@}"
}

python-shell() {
  # pyenv shell 3.8-dev
  pyenv shell "${@}"
}

# Different versions
versions() {
  echo "python >> "
  pyenv versions
  echo "python pip: $(pyenv which pip)"
  [[ -f ~/.python-version ]] && cat .python-version
  echo "go version: $(go version)"
  echo "ruby version: $(ruby --version)"

  echo ""
  hub version

  echo ""
  echo "macOS: $(archey -c)"
}

# Remove remote branches
git-remove-remote() {
  branch=""
  pattern=""
  while :; do
    case $1 in
        -b|--branch) branch="$2"; shift ;;
        -p|--pattern) pattern="$2"; shift ;;
        *) echo "Usage: $0 [-b <mastere|develop>] [-p <fix/*|feat/*>]" 1>&2; break ;;
    esac
    shift
  done
  if [ -n "$branch" ] && [ -n "$pattern" ]; then
      git branch -r --format "%(refname:short)" --merged "origin/${branch}" |  cut -d/ -f2- | grep "${pattern}" | xargs -n 1 git push --delete origin
    else
      echo "No branches removed."
  fi
}

# Provide information about currect user
iam() {
  echo -e "$(whoami) < whoami"
  if git rev-parse --git-dir > /dev/null 2>&1; then
    echo -e "$(git iam) < git"
  else
    : # this is not a git repository
  fi
}

is_in_git_repo() {
  git rev-parse HEAD > /dev/null 2>&1
}

# Git with FZF
function _gdif() {
  is_in_git_repo || return
  git -c color.status=always status --short |
  fzf-down -m --ansi --nth 2..,.. \
    --preview '(git diff --color=always -- {-1} | sed 1,4d; cat {-1})' |
  cut -c4- | sed 's/.* -> //'
}

function _gbranch() {
  is_in_git_repo || return
  git branch -a --color=always | grep -v '/HEAD\s' | sort |
  fzf-down --ansi --multi --tac --preview-window right:70% \
    --preview 'git log --oneline --graph --date=short --color=always --pretty="format:%C(auto)%cd %h%d %s" $(sed s/^..// <<< {} | cut -d" " -f1)' |
  sed 's/^..//' | cut -d' ' -f1 |
  sed 's#^remotes/##'
}

# function to search public repository and clone it
function fzf-git-search-clone() {
  local repo=$1
  local base_url="https://github.com"
  repositories=$(curl -Ns https://api.github.com/users/$repo/repos?per_page=100)
  repo_name=$(echo $repositories | jq --stream -r 'select(.[0][1] == "full_name") | .[1]')
  repository=$(echo $repo_name | fzf-down --multi --preview-window right:65% )

  if [ "$(git rev-parse --is-inside-work-tree 2>/dev/null)" ]; then
      echo "Please do no clone into a repo."
      return
  fi
  if [[ "$repository" == "" ]]; then
      echo "Please select a repository."
      return
  fi

  git clone "$base_url/$repository"
}

# https://polothy.github.io/post/2019-08-19-fzf-git-checkout
fzf-git-branch() {
  is_in_git_repo || return

  git branch --color=always --all --sort=-committerdate |
      grep -v HEAD |
      fzf --height 50% --ansi --no-multi --preview-window right:65% \
          --preview 'git log -n 50 --color=always --date=short --pretty="format:%C(auto)%cd %h%d %s" $(sed "s/.* //" <<< {})' |
      sed "s/.* //"
}
# https://polothy.github.io/post/2019-08-19-fzf-git-checkout
fzf-git-checkout() {
    git rev-parse HEAD > /dev/null 2>&1 || return

    local branch

    branch=$(_gbranch)
    if [[ "$branch" = "" ]]; then
        echo "No branch selected."
        return
    fi

    # If branch name starts with 'remotes/' then it is a remote branch. By
    # using --track and a remote branch name, it is the same as:
    # git checkout -b branchName --track origin/branchName
    if [[ "$branch" = 'remotes/'* ]]; then
        git checkout --track $branch
    else
        git checkout $branch;
    fi
}

# shellcheck disable=SC2156
function _grepo() {
  folder=$(find . -type d -exec sh -c 'cd "{}"; git rev-parse --git-dir 2> /dev/null 1>&2;' \; -prune -print |
    fzf-down --multi --preview-window right:70% --height 40% \
    --preview "find . -exec sh -c 'ls -lahF {};' \;")
  cd $folder
}

function _glog() {
  is_in_git_repo || return
  git log --date=short --format="%C(green)%C(bold)%cd %C(auto)%h%d %s (%an)" --graph --color=always |
  fzf-down --ansi --no-sort --reverse --multi --bind 'ctrl-s:toggle-sort' \
    --header 'Press CTRL-S to toggle sort' \
    --preview 'grep -o "[a-f0-9]\{7,\}" <<< {} | xargs git show --color=always' |
  grep -o "[a-f0-9]\{7,\}"
}

function _gremote() {
  is_in_git_repo || return
  git remote -v | awk '{print $1 "\t" $2}' | uniq |
  fzf-down --tac \
    --preview 'git log --oneline --graph --date=short --pretty="format:%C(auto)%cd %h%d %s" {1}' |
  cut -d$'\t' -f1
}

function _gstash() {
  is_in_git_repo || return
  git stash list | fzf-down --reverse -d: --preview 'git show --color=always {1}' |
  cut -d: -f1
}

# Work with tags
function _gtag() {
  is_in_git_repo || return
  git tag --sort -version:refname |
  fzf-down --multi --preview-window right:70% \
    --preview 'git show --color=always {}'
}

function _gt {
  # is_in_git_repo || return
  git tag --sort -version:refname |
  fzf-down --multi --preview-window right:70% \
    --preview 'git show --color=always {}'
}

function git-remove-tag {
  git tag -d $1
  git push --delete origin $1
}

# open github repository in browser
function _gopen(){
  is_in_git_repo || return
  url=$(git config --get remote.origin.url)
  sub='git@'
  if [[ "$url" == *"$sub"* ]]; then
    url="${url//git@/https://}"
    user=$(echo $url | sed -Ene's#.*https://github.com:(.*)/(.*).git#\1#p')
    repo=$(echo $url | sed -Ene's#.*https://github.com:(.*)/(.*).git#\2#p')
    url="https://github.com/${user}/${repo}"
  fi
  open "$url"
}

# Generate a new random password
pwdgen() {
  local length=${1:-15}
  keepassxc-cli generate -L ${length} -q
}

grep-logs() {
  local file="${1}"
  local pattern="${1:-(error|warning|failure)}"
  tail -f "${file}" | grep -i -P "${pattern}"
}

not-grep-logs() {
  local file="${1}"
  local pattern="${1:-info}"
  tail -f "${file}" | grep -v -i "${pattern}"
}

# shellcheck disable=SC2046,SC2091,SC2051,SC2034
loop-cmd() {
  set -x
  local count="${1}"
  local cmd="${2}"
  for srv in server{1..${count}}; do $("${cmd}");done
}

port-listen() {
  local port="${1:-80}"
  netstat -ant | grep :"${port}"
}

ping-port() {
  local port="${1:-80}"
  local ip="${1:-127.0.0.1}"
  nmap -p "${port}" -sT "${ip}"
}

lookup-dns() {
  nslookup "${1}"
}

pid() {
  lsof -i :"${1}"
}

tunnel() {
  # todo: opt args
  local user="${1}"
  local bastionip="${2}"
  local privatip="${3}"
  local port="${4}"
  ssh -nfNJ "${user}@${bastionip}" "${user}@${privatip}"  "-L127.0.0.1:${port}:127.0.0.1:${port}"
}

# https://github.com/koalaman/shellcheck/wiki/SC2035
size-folders() {
  du -k ./* | awk '$1 > 500000' | sort -nr
}

_master() {
  if git rev-parse --git-dir > /dev/null 2>&1; then
    git checkout master && git pull master
  fi
}

# Create a new git repo with one README commit and CD into it
function gitrepo() { mkdir $1; cd $1; git init; touch README; git add README; git commit -mFirst-commit;}

# TOP 10 COMMANDS
function last10() { history | awk '{a[$2]++ } END{for(i in a){print a[i] " " i}}' | sort -rn | head; }

# Goes up many dirs as the number passed as argument, if none goes up by 1 by default
updir() {
  local d=""
  limit=$1
  for ((i=1 ; i <= limit ; i++)); do
    d=$d/..
  done
  d=$(echo $d | sed 's/^\///')
  if [[ -z "$d" ]]; then
    d=..
  fi
  cd $d
}

# navigation
fzf-down() { fzf --height 50% "$@" --border ;}

# Process statuses on steroids
psef() { ps -ef | fzf-down --header-lines 1 --info inline --layout reverse --multi |  awk '{print $2}' ;}

# Process statuses on steroids
folders() { _z -l 2>&1 | fzf --height 40% --nth 2.. --reverse --inline-info --tac | sed 's/^[0-9,.]* *//';}

#!/bin/bash
# shellcheck disable=SC2145,SC2199,SC2155,SC2164,SC2086
# https://raw.githubusercontent.com/ivankatliarchuk/dotfiles/master/shell/functions

ROOT="$(command -v sudo)"

# Update dotfiles
dfu() {
    (
        cd ~/dotfiles && git pull --ff-only
    )
}

# Create a directory and cd into it
mcd() {
    mkdir "${1}" && cd "${1}"
}

# Create a new directory and enter it
function mkcd() { mkdir -p "$@" && cd "$_"; }

# Execute a command in a specific directory
xin() {
    (
        cd "${1}" && shift && ${@}
    )
}

# Zip the directory
function zd() { zip -r "$1".zip "$1"; }

# 7zip the directory
function 7zd() { 7z a "$1" "$1"/*; }

# Extract most known archives with one command
function extract() {
  if [ -f $1 ]; then
    case $1 in
      *.tar.bz2) tar xvjf $1                                   ;;
      *.tar.gz)  tar xvzf $1                                   ;;
      *.tar.xz)  tar xvJf $1                                   ;;
      *.lzma)    unlzma $1                                     ;;
      *.bz2)     bunzip2 $1                                    ;;
      *.rar)     unrar x -ad $1                                ;;
      *.gz)      gunzip $1                                     ;;
      *.tar)     tar xvf $1                                    ;;
      *.tbz2)    tar xvjf $1                                   ;;
      *.tgz)     tar xvzf $1                                   ;;
      *.zip)     unzip $1                                      ;;
      *.Z)       uncompress $1                                 ;;
      *.7z)      7z x $1                                       ;;
      *.xz)      unxz $1                                       ;;
      *.exe)     cabextract $1                                 ;;
      *)         echo "extract: '$1' - unknown archive method" ;;
    esac
  else
    echo "$1 - file does not exist"
  fi
}

# to ascii
function decode() {
  case $1 in
    base64) shift 1; echo -n "$@" | base64 --decode            ;;
    binary) shift 1; echo -n "$@" | perl -lpe '$_=pack"B*",$_' ;;
    hex)    shift 1; echo -n "0x$@" | xxd -r                   ;;
  esac
}

# from ascii
function encode() {
  case $1 in
    base64) shift 1; echo -n "$@" | openssl base64            ;;
    binary) shift 1; echo -n "$@" | perl -lpe '$_=unpack"B*"' ;;
    hex)    shift 1; echo -n "$@" | xxd -p                    ;;
    md5)    shift 1; echo -n "$@" | openssl md5               ;;
    sha1)   shift 1; echo -n "$@" | openssl sha1              ;;
  esac
}

# Determine size of a file or total size of a directory
function fs() {
	if du -b /dev/null > /dev/null 2>&1; then
		local arg=-sbh;
	else
		local arg=-sh;
	fi
	if [[ -n "$@" ]]; then
		du $arg -- "$@";
	else
		du $arg .[^.]* ./*;
	fi;
}

# Run `dig` and display the most useful info
function digga() {
	dig +nocmd "$1" any +multiline +noall +answer;
}

# Show all the names (CNs and SANs) listed in the SSL certificate
# for a given domain
function getcertnames() {
	if [ -z "${1}" ]; then
		echo "ERROR: No domain specified.";
		return 1;
	fi;

	local domain="${1}";
	echo "Testing ${domain}â€¦";
	echo ""; # newline

	local tmp=$(echo -e "GET / HTTP/1.0\nEOT" \
		| openssl s_client -connect "${domain}:443" -servername "${domain}" 2>&1);

	if [[ "${tmp}" = *"-----BEGIN CERTIFICATE-----"* ]]; then
		local certText=$(echo "${tmp}" \
			| openssl x509 -text -certopt "no_aux, no_header, no_issuer, no_pubkey, \
			no_serial, no_sigdump, no_signame, no_validity, no_version");
		echo "Common Name:";
		echo ""; # newline
		echo "${certText}" | grep "Subject:" | sed -e "s/^.*CN=//" | sed -e "s/\/emailAddress=.*//";
		echo ""; # newline
		echo "Subject Alternative Name(s):";
		echo ""; # newline
		echo "${certText}" | grep -A 1 "Subject Alternative Name:" \
			| sed -e "2s/DNS://g" -e "s/ //g" | tr "," "\n" | tail -n +2;
		return 0;
	else
		echo "ERROR: Certificate not found.";
		return 1;
	fi;
}

# Normalize `open` across Linux, macOS, and Windows.
# This is needed to make the `o` function (see below) cross-platform.
if [ ! "$(uname -s)" = 'Darwin' ]; then
	if grep -q Microsoft /proc/version; then
		# Ubuntu on Windows using the Linux subsystem
		alias open='explorer.exe';
	else
		alias open='xdg-open';
	fi
fi

# `o` with no arguments opens the current directory, otherwise opens the given
# location
op() {
	if [ $# -eq 0 ]; then
		open .;
	else
		open "$@";
	fi;
}

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
tre() {
	tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX;
}

# Change directories and view the contents at the same time
cdl() {
    DIR="$*";
    # if no DIR given, go home
    if [ $# -lt 1 ]; then
      DIR=$HOME;
    fi;
    builtin cd "${DIR}" && \
    # use your preferred ls command
    ls -F
}

gpg-import() {
  local public_key=$1
  local private_key=$2
  gpg --import "${public_key}"
  gpg --allow-secret-key-import --import "${private_key}"
}

gpg-export() {
  local armor=$1 # some-email@mydomain.local
  gpg --export -a "${armor}" > public.key
  gpg --export-secret-key -a "${armor}" > private.key
}

gpg-restart() {
  pkill gpg
  pkill pinentry
  pkill ssh-agent
  eval "$(gpg-agent --daemon --enable-ssh-support)"
}

# WWW
grep-ip() {
  grep -Eo \
    "([0-9]{1,3}\.){3}[0-9]{1,3}" "${@}"
}

grep-url() {
  grep -Eo \
    "(https?|ftp|file)://[-A-Za-z0-9\+&@#/%?=~_|!:,.;]*[-A-Za-z0-9\+&@#/%=~_|]" "${@}"
}

cidr() {
  whois -h "whois.arin.net" -- \
  "n + $(curl -s https://icanhazip.com/)" | \
    grep "CIDR:"
}

# Network
# shellcheck disable=SC2032,SC2033
function vpn {
  ssh -C -N -L 5555:127.0.0.1:8118 vpn
}

# Dump Traffic
function dump-arp {
  ${ROOT} tcpdump -eni ${NETWORK} -w arp-${NOW}.pcap \
    "ether proto 0x0806"
}

function dump-icmp {
  ${ROOT} tcpdump -ni ${NETWORK} -w icmp-${NOW}.pcap \
    "icmp"
}

function dump-pflog {
  ${ROOT} tcpdump -ni pflog0 -w pflog-${NOW}.pcap \
    "not icmp6 and not host ff02::16 and not host ff02::d"
}

function dump-syn {
  ${ROOT} tcpdump -ni ${NETWORK} -w syn-${NOW}.pcap \
    "tcp[13] & 2 != 0"
}

function dump-udp {
  ${ROOT} tcpdump -ni ${NETWORK} -w udp-${NOW}.pcap \
    "udp and not port 443"
}

function dump-dns {
  tshark -Y "dns.flags.response == 1" -Tfields \
    -e frame.time_delta -e dns.qry.name -e dns.a \
      -Eseparator=,
}

function dump-http {
  tshark -Y "http.request or http.response" -Tfields \
    -e ip.dst -e http.request.full_uri -e http.request.method \
      -e http.response.code -e http.response.phrase \
        -Eseparator=,
}

function dump-ssl {
  tshark -Y "ssl.handshake.certificate" -Tfields \
    -e ip.src -e x509sat.uTF8String -e x509sat.printableString \
      -e x509sat.universalString -e x509sat.IA5String \
        -e x509sat.teletexString \
          -Eseparator=,
}

# Docker
docker-rmi() {
  docker container prune -f
  docker rmi "$(docker images -a | grep "^<none>" | awk '{print $3}')" -f
  docker rmi "$(docker images -f "dangling=true" -q)" -f
  docker image prune --force --filter "repository=none"
  docker image prune --force --filter "repository=<none>"
  # keep last 2 builds for each image from the repository
  for diru in $(docker images --format "{{.Repository}}" | sort | uniq); do
      for dimr in $(docker images --format "{{.ID}};{{.Repository}}:{{.Tag}};'{{.CreatedAt}}'" --filter reference="$diru" | sed "s/\s+/~/g" | tail -n+3); do
          img_tag=$(echo "${dimr}" | cut -d";" -f2);
          docker rmi "$img_tag";
      done;
  done
  # clean dangling images if any
  docker image prune -f
}

pip-install() {
  python3 -m pip install "${@}"
}

python-local() {
  # python-local 2.7.15
  pyenv local "${@}"
}

python-shell() {
  # pyenv shell 3.8-dev
  pyenv shell "${@}"
}

# Different versions
versions() {
  echo "python >> "
  pyenv versions
  echo "python pip: $(pyenv which pip)"
  [[ -f ~/.python-version ]] && cat .python-version
  echo "go version: $(go version)"
  echo "ruby version: $(ruby --version)"
  echo ""
  echo "macOS: $(archey -c)"
}

# Provide information about currect user
iam() {
  echo -e "$(whoami) < whoami"
  if git rev-parse --git-dir > /dev/null 2>&1; then
    echo -e "$(git iam) < git"
  else
    : # this is not a git repository
  fi
}
